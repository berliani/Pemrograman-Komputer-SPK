/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package topsis;


import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import java.sql.PreparedStatement;


/**
 *
 * @author Berliani Risqi
 */
public class dashboard extends javax.swing.JFrame {

    /**
     * Creates new form dashboard
     */
    public dashboard() {
        initComponents();
        refreshtableKriteria();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        refreshtableSubKriteria();
        refreshtableAlternatif();

        generateAltNilai();
        refreshTableAltNilai();
        updateAllTables();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnCoffeeshop = new javax.swing.JButton();
        btnKriteria = new javax.swing.JButton();
        btnSubKriteria = new javax.swing.JButton();
        btnTopsis = new javax.swing.JButton();
        jPanelKanan = new javax.swing.JPanel();
        coffeeshop = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtnamacoffeshop = new javax.swing.JTextField();
        cmbFasilitas = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbHarga = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbVarMenu = new javax.swing.JComboBox<>();
        cmbJam = new javax.swing.JComboBox<>();
        btnTambah = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmbLokasi = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblAlternatif = new javax.swing.JTable();
        kriteria = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKriteria = new javax.swing.JTable();
        subkriteria = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSubKriteria = new javax.swing.JTable();
        topsis = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblalt_nilai = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblNormalisasi = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblnormtbb = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblideal = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tbljarak = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblhasil = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblranking = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(206, 164, 90));

        jLabel1.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/kecit.png"))); // NOI18N
        jLabel1.setText("CafeCompass");

        btnCoffeeshop.setBackground(new java.awt.Color(206, 164, 90));
        btnCoffeeshop.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCoffeeshop.setForeground(new java.awt.Color(255, 255, 255));
        btnCoffeeshop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-coffee-30.png"))); // NOI18N
        btnCoffeeshop.setText("  CoffeShop");
        btnCoffeeshop.setBorder(null);
        btnCoffeeshop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCoffeeshopActionPerformed(evt);
            }
        });

        btnKriteria.setBackground(new java.awt.Color(206, 164, 90));
        btnKriteria.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnKriteria.setForeground(new java.awt.Color(255, 255, 255));
        btnKriteria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-star-30.png"))); // NOI18N
        btnKriteria.setText("  Kriteria");
        btnKriteria.setBorder(null);
        btnKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKriteriaActionPerformed(evt);
            }
        });

        btnSubKriteria.setBackground(new java.awt.Color(206, 164, 90));
        btnSubKriteria.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSubKriteria.setForeground(new java.awt.Color(255, 255, 255));
        btnSubKriteria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-scales-30.png"))); // NOI18N
        btnSubKriteria.setText("  Sub Kriteria");
        btnSubKriteria.setBorder(null);
        btnSubKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubKriteriaActionPerformed(evt);
            }
        });

        btnTopsis.setBackground(new java.awt.Color(206, 164, 90));
        btnTopsis.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnTopsis.setForeground(new java.awt.Color(255, 255, 255));
        btnTopsis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-math-30.png"))); // NOI18N
        btnTopsis.setText("  TOPSIS");
        btnTopsis.setBorder(null);
        btnTopsis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopsisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnCoffeeshop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnKriteria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSubKriteria, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTopsis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addComponent(btnCoffeeshop, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSubKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTopsis, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        jPanelKanan.setBackground(new java.awt.Color(255, 255, 255));
        jPanelKanan.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        coffeeshop.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Nama CoffeeShop :");

        cmbFasilitas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kurang Lengkap (1-3 Fasilitas)", "Lengkap (4-6 Fasilitas)", "Sangat Lengkap (7-10 Fasilitas)" }));
        cmbFasilitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFasilitasActionPerformed(evt);
            }
        });

        jLabel3.setText("Fasilitas :");

        cmbHarga.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Terjangkau (10.000-30.000)", "Standar Normal (31.000-40.000)", "Mahal (41.000-100.000)" }));

        jLabel4.setText("Harga :");

        jLabel5.setText("Variasi Menu :");

        jLabel6.setText("Jam Operasional :");

        cmbVarMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sedikit (15-30 MENU)", "Cukup (31-50 MENU)", "Banyak (51-100 MENU)" }));
        cmbVarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbVarMenuActionPerformed(evt);
            }
        });

        cmbJam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "24 Jam", "Pagi-Malam", "Siang-Malam" }));
        cmbJam.setToolTipText("");
        cmbJam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbJamActionPerformed(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        jLabel7.setText("Lokasi :");

        cmbLokasi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pusat Kota (Kota Tegal)", "Pinggir Kota (Kab. Tegal)" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbFasilitas, 0, 199, Short.MAX_VALUE)
                            .addComponent(txtnamacoffeshop))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbLokasi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbVarMenu, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbJam, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)))
                .addGap(63, 63, 63)
                .addComponent(btnTambah)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtnamacoffeshop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbFasilitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btnTambah))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(cmbLokasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbVarMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 11, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbJam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );

        coffeeshop.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.BorderLayout());

        tblAlternatif.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nama CoffeeShop", "Fasilitas", "Harga", "Lokasi", "Variasi Menu", "Jam Operasional"
            }
        ));
        jScrollPane4.setViewportView(tblAlternatif);

        jPanel4.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        coffeeshop.add(jPanel4, java.awt.BorderLayout.CENTER);

        kriteria.setBackground(new java.awt.Color(255, 255, 255));
        kriteria.setLayout(new java.awt.BorderLayout());

        tblKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nama", "Bobot", "Flag", "Tipe"
            }
        ));
        jScrollPane1.setViewportView(tblKriteria);

        kriteria.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        subkriteria.setBackground(new java.awt.Color(255, 255, 255));
        subkriteria.setLayout(new java.awt.BorderLayout());

        tblSubKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nama", "Bobot", "Kriteria"
            }
        ));
        jScrollPane2.setViewportView(tblSubKriteria);

        subkriteria.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        topsis.setBackground(new java.awt.Color(255, 255, 255));
        topsis.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        tblalt_nilai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Nama", "C1", "C2", "C3", "C4", "C5"
            }
        ));
        jScrollPane3.setViewportView(tblalt_nilai);

        jPanel3.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Nilai Alternatif", jPanel3);

        jPanel5.setLayout(new java.awt.BorderLayout());

        tblNormalisasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Nama", "C1", "C2", "C3", "C4", "C5"
            }
        ));
        jScrollPane5.setViewportView(tblNormalisasi);

        jPanel5.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Normalisasi", jPanel5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        tblnormtbb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Nama", "C1", "C2", "C3", "C4", "C5"
            }
        ));
        jScrollPane7.setViewportView(tblnormtbb);

        jPanel6.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Normalisasi Terbobot", jPanel6);

        jPanel8.setLayout(new java.awt.BorderLayout());

        tblideal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Flag", "C1", "C2", "C3", "C4", "C5"
            }
        ));
        jScrollPane8.setViewportView(tblideal);

        jPanel8.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Ideal", jPanel8);

        jPanel9.setLayout(new java.awt.BorderLayout());

        tbljarak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No", "Nama", "D+", "D-"
            }
        ));
        jScrollPane9.setViewportView(tbljarak);

        jPanel9.add(jScrollPane9, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Jarak", jPanel9);

        jPanel10.setLayout(new java.awt.BorderLayout());

        tblhasil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No", "Nama", "Hasil (V)"
            }
        ));
        jScrollPane10.setViewportView(tblhasil);

        jPanel10.add(jScrollPane10, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Hasil", jPanel10);

        jPanel7.setLayout(new java.awt.BorderLayout());

        tblranking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Ranking", "Nama", "Nilai Preferensi"
            }
        ));
        jScrollPane6.setViewportView(tblranking);
        if (tblranking.getColumnModel().getColumnCount() > 0) {
            tblranking.getColumnModel().getColumn(2).setResizable(false);
        }

        jPanel7.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Ranking", jPanel7);

        topsis.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanelKananLayout = new javax.swing.GroupLayout(jPanelKanan);
        jPanelKanan.setLayout(jPanelKananLayout);
        jPanelKananLayout.setHorizontalGroup(
            jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kriteria, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
            .addGroup(jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(subkriteria, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE))
            .addGroup(jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(topsis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(coffeeshop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelKananLayout.setVerticalGroup(
            jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kriteria, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
            .addGroup(jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(subkriteria, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
            .addGroup(jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(topsis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelKananLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(coffeeshop, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
        );

        getContentPane().add(jPanelKanan, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCoffeeshopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCoffeeshopActionPerformed
        jPanelKanan.removeAll();
        jPanelKanan.repaint();
        jPanelKanan.revalidate();
        
        //menambahkan panel
        jPanelKanan.add(coffeeshop);
        jPanelKanan.repaint();
        jPanelKanan.revalidate();
    }//GEN-LAST:event_btnCoffeeshopActionPerformed

    private void btnKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKriteriaActionPerformed
        jPanelKanan.removeAll();
        jPanelKanan.repaint();
        jPanelKanan.revalidate();
        
        //menambahkan panel
        jPanelKanan.add(kriteria);
        jPanelKanan.repaint();
        jPanelKanan.revalidate();        
    }//GEN-LAST:event_btnKriteriaActionPerformed

    private void btnSubKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubKriteriaActionPerformed
         jPanelKanan.removeAll();
        jPanelKanan.repaint();
        jPanelKanan.revalidate();
        
        //menambahkan panel
        jPanelKanan.add(subkriteria);
        jPanelKanan.repaint();
        jPanelKanan.revalidate();
    }//GEN-LAST:event_btnSubKriteriaActionPerformed

    private void btnTopsisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopsisActionPerformed
         jPanelKanan.removeAll();
        jPanelKanan.repaint();
        jPanelKanan.revalidate();
        
        //menambahkan panel
        jPanelKanan.add(topsis);
        jPanelKanan.repaint();
        jPanelKanan.revalidate();
    }//GEN-LAST:event_btnTopsisActionPerformed

    private void cmbFasilitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFasilitasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFasilitasActionPerformed

    private void cmbJamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbJamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbJamActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed

    try {
        
        String nama = txtnamacoffeshop.getText().trim();
        String fasilitas = (String) cmbFasilitas.getSelectedItem();
        String harga = (String) cmbHarga.getSelectedItem();
        String lokasi = (String) cmbLokasi.getSelectedItem();
        String variasiMenu = (String) cmbVarMenu.getSelectedItem();
        String jamOperasional = (String) cmbJam.getSelectedItem();

        // Validasi input
        if (nama.isEmpty() || fasilitas == null || harga == null || lokasi == null || variasiMenu == null || jamOperasional == null) {
            JOptionPane.showMessageDialog(null, "Semua field harus diisi!");
            return;
        }

        // Query untuk mendapatkan id_subkriteria berdasarkan nama subkriteria
        String getIdQuery = "SELECT id_subkriteria FROM subkriteria WHERE nama = ?";
        
        Connection k = koneksi.Go();
        PreparedStatement ps = k.prepareStatement(getIdQuery);

        int idFasilitas = getIdForSubkriteria(ps, fasilitas, "fasilitas");
        int idHarga = getIdForSubkriteria(ps, harga, "harga");
        int idLokasi = getIdForSubkriteria(ps, lokasi, "lokasi");
        int idVariasiMenu = getIdForSubkriteria(ps, variasiMenu, "variasi menu");
        int idJamOperasional = getIdForSubkriteria(ps, jamOperasional, "jam operasional");

        // Query untuk memasukkan data ke tabel alternatif
        String insertQuery = "INSERT INTO alternatif (nama, C1, C2, C3, C4, C5) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement insertPs = k.prepareStatement(insertQuery);
        insertPs.setString(1, nama);
        insertPs.setInt(2, idFasilitas);
        insertPs.setInt(3, idHarga);
        insertPs.setInt(4, idLokasi);
        insertPs.setInt(5, idVariasiMenu);
        insertPs.setInt(6, idJamOperasional);

        insertPs.executeUpdate();

        
        JOptionPane.showMessageDialog(null, "Data alternatif berhasil ditambahkan!");

        // Mengosongkan field setelah data ditambahkan
        txtnamacoffeshop.setText("");
        cmbFasilitas.setSelectedIndex(-1);
        cmbHarga.setSelectedIndex(-1);
        cmbLokasi.setSelectedIndex(-1);
        cmbVarMenu.setSelectedIndex(-1);
        cmbJam.setSelectedIndex(-1);

        
        refreshtableAlternatif();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Gagal menambahkan data alternatif: " + e.getMessage());
    }
}

//  method untuk mendapatkan id_subkriteria dari nama subkriteria 
private int getIdForSubkriteria(PreparedStatement ps, String subkriteriaName, String subkriteriaType) throws SQLException {
    ps.setString(1, subkriteriaName);
    ResultSet rs = ps.executeQuery();

    if (rs.next()) {
        int id = rs.getInt("id_subkriteria");
        rs.close();
        return id;
    } else {
        rs.close();
        throw new SQLException("Subkriteria tidak ditemukan untuk " + subkriteriaType + ": " + subkriteriaName);
    }

    }//GEN-LAST:event_btnTambahActionPerformed

    private void cmbVarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbVarMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbVarMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCoffeeshop;
    private javax.swing.JButton btnKriteria;
    private javax.swing.JButton btnSubKriteria;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnTopsis;
    private javax.swing.JComboBox<String> cmbFasilitas;
    private javax.swing.JComboBox<String> cmbHarga;
    private javax.swing.JComboBox<String> cmbJam;
    private javax.swing.JComboBox<String> cmbLokasi;
    private javax.swing.JComboBox<String> cmbVarMenu;
    private javax.swing.JPanel coffeeshop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelKanan;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel kriteria;
    private javax.swing.JPanel subkriteria;
    private javax.swing.JTable tblAlternatif;
    private javax.swing.JTable tblKriteria;
    private javax.swing.JTable tblNormalisasi;
    private javax.swing.JTable tblSubKriteria;
    private javax.swing.JTable tblalt_nilai;
    private javax.swing.JTable tblhasil;
    private javax.swing.JTable tblideal;
    private javax.swing.JTable tbljarak;
    private javax.swing.JTable tblnormtbb;
    private javax.swing.JTable tblranking;
    private javax.swing.JPanel topsis;
    private javax.swing.JTextField txtnamacoffeshop;
    // End of variables declaration//GEN-END:variables
 
 public void refreshtableKriteria() {
        try {
            DefaultTableModel m = (DefaultTableModel) tblKriteria.getModel();

            String q = "SELECT * FROM kriteria";
            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            ResultSet r = s.executeQuery(q);
            m.getDataVector().removeAllElements();
            //int no = 1;
            while (r.next()) {
                int id = r.getInt("id_kriteria");
                String nama = r.getString("nama");
                String bobot = r.getString("bobot");
                String flag = r.getString("flag");
                String label = r.getString("label");
                Object[] data = {id, nama, bobot, flag, label};
                m.addRow(data);
                //no++;                
            }

        } catch (Exception e) {
        }

}
 public void refreshtableSubKriteria() {
    try {
        // Mendapatkan model tabel dari JTable
        DefaultTableModel m = (DefaultTableModel) tblSubKriteria.getModel();

        // Query untuk mengambil data dari subkriteria dengan join ke kriteria untuk mendapatkan nama kriteria
        String q = "SELECT s.id_subkriteria, s.nama, s.bobot, k.nama AS kriteria_nama " +
                   "FROM subkriteria s " +
                   "JOIN kriteria k ON s.kriteria_id_kriteria = k.id_kriteria";

        // Mendapatkan koneksi ke database
        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        ResultSet r = s.executeQuery(q);

        // Membersihkan data yang ada di model tabel
        m.getDataVector().removeAllElements();

        // Loop melalui hasil query dan tambahkan ke model tabel
        while (r.next()) {
            int id = r.getInt("id_subkriteria");
            String nama = r.getString("nama");
            String bobot = r.getString("bobot");
            String kriteria_nama = r.getString("kriteria_nama"); // Mengambil nama kriteria dari hasil join

            // Membuat array objek untuk setiap baris
            Object[] data = {id, nama, bobot, kriteria_nama};

            // Tambahkan baris ke model tabel
            m.addRow(data);
        }

    } catch (SQLException e) {
        // Handling error
        JOptionPane.showMessageDialog(null, "Gagal mengambil data subkriteria: " + e.getMessage());
    }
}
 public void refreshtableAlternatif() {
    try {
        // Mendapatkan model tabel dari JTable
        DefaultTableModel m = (DefaultTableModel) tblAlternatif.getModel();

        // Query untuk mengambil data dari tabel alternatif dengan join ke subkriteria
        String q = "SELECT a.id, a.nama, " +
                   "s1.nama AS C1, " +
                   "s2.nama AS C2, " +
                   "s3.nama AS C3, " +
                   "s4.nama AS C4, " +
                   "s5.nama AS C5 " +
                   "FROM alternatif a " +
                   "LEFT JOIN subkriteria s1 ON a.C1 = s1.id_subkriteria " +
                   "LEFT JOIN subkriteria s2 ON a.C2 = s2.id_subkriteria " +
                   "LEFT JOIN subkriteria s3 ON a.C3 = s3.id_subkriteria " +
                   "LEFT JOIN subkriteria s4 ON a.C4 = s4.id_subkriteria " +
                   "LEFT JOIN subkriteria s5 ON a.C5 = s5.id_subkriteria";

        // Mendapatkan koneksi ke database
        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        ResultSet r = s.executeQuery(q);

        // Membersihkan data yang ada di model tabel
        m.getDataVector().removeAllElements();

        // Loop melalui hasil query dan tambahkan ke model tabel
        while (r.next()) {
            int id = r.getInt("id");
            String nama = r.getString("nama");
            String c1 = r.getString("C1");
            String c2 = r.getString("C2");
            String c3 = r.getString("C3");
            String c4 = r.getString("C4");
            String c5 = r.getString("C5");

            // Membuat array objek untuk setiap baris
            Object[] data = {id, nama, c1, c2, c3, c4, c5};

            // Tambahkan baris ke model tabel
            m.addRow(data);
        }

    } catch (SQLException e) {
        // Handling error
        JOptionPane.showMessageDialog(null, "Gagal mengambil data alternatif: " + e.getMessage());
    }
}
 
 private void generateAltNilai() {
    try {
        // Query untuk mengambil data dari tabel alternatif
        String altQuery = "SELECT id, C1, C2, C3, C4, C5 FROM alternatif";

        // Mendapatkan koneksi ke database
        Connection conn = koneksi.Go();
        Statement altStmt = conn.createStatement();
        ResultSet altRs = altStmt.executeQuery(altQuery);

        // Hapus data sebelumnya dari tabel alt_nilai jika ada
        String truncateQuery = "TRUNCATE TABLE alt_nilai";
        Statement truncateStmt = conn.createStatement();
        truncateStmt.executeUpdate(truncateQuery);

        // Menyiapkan query untuk mengambil bobot dari tabel subkriteria
        String getBobotQuery = "SELECT bobot FROM subkriteria WHERE id_subkriteria = ?";
        PreparedStatement getBobotStmt = conn.prepareStatement(getBobotQuery);

        // Menyiapkan query untuk memasukkan data ke dalam tabel alt_nilai
        String insertQuery = "INSERT INTO alt_nilai (alt_id, C1, C2, C3, C4, C5) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement insertStmt = conn.prepareStatement(insertQuery);

        // Loop melalui hasil query dari tabel alternatif
        while (altRs.next()) {
            int altId = altRs.getInt("id");
            int c1Id = altRs.getInt("C1");
            int c2Id = altRs.getInt("C2");
            int c3Id = altRs.getInt("C3");
            int c4Id = altRs.getInt("C4");
            int c5Id = altRs.getInt("C5");

            // Mengambil bobot untuk setiap subkriteria yang terkait dengan C1-C5
            double bobotC1 = getBobotById(getBobotStmt, c1Id);
            double bobotC2 = getBobotById(getBobotStmt, c2Id);
            double bobotC3 = getBobotById(getBobotStmt, c3Id);
            double bobotC4 = getBobotById(getBobotStmt, c4Id);
            double bobotC5 = getBobotById(getBobotStmt, c5Id);

            // Memasukkan data ke tabel alt_nilai
            insertStmt.setInt(1, altId);
            insertStmt.setDouble(2, bobotC1);
            insertStmt.setDouble(3, bobotC2);
            insertStmt.setDouble(4, bobotC3);
            insertStmt.setDouble(5, bobotC4);
            insertStmt.setDouble(6, bobotC5);
            insertStmt.executeUpdate();
        }

        // Tutup semua koneksi dan statement
        altRs.close();
        altStmt.close();
        truncateStmt.close();
        getBobotStmt.close();
        insertStmt.close();
        conn.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Gagal menghasilkan data alt_nilai: " + e.getMessage());
    }
}


// Metode bantu untuk mengambil bobot berdasarkan id subkriteria
private double getBobotById(PreparedStatement ps, int subkriteriaId) throws SQLException {
    ps.setInt(1, subkriteriaId);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        return rs.getDouble("bobot");
    }
    return 0.0; // Nilai default jika tidak ada data
}
// Metode untuk refresh tabel alt_nilai
private void refreshTableAltNilai() {
    try {
        // Mendapatkan model tabel dari JTable
        DefaultTableModel model = (DefaultTableModel) tblalt_nilai.getModel();

        // Hapus data lama dari tabel alt_nilai (reset)
        model.setRowCount(0);

        // Query untuk mengambil data dari alt_nilai dengan JOIN ke tabel alternatif
        String query = "SELECT an.id, a.nama AS nama_alternatif, an.C1, an.C2, an.C3, an.C4, an.C5 " +
                       "FROM alt_nilai an " +
                       "JOIN alternatif a ON an.alt_id = a.id";

        Connection conn = koneksi.Go();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        // Loop melalui hasil query dan tambahkan ke model tabel
        while (rs.next()) {
            int id = rs.getInt("id");
            String namaAlternatif = rs.getString("nama_alternatif");
            double c1 = rs.getDouble("C1");
            double c2 = rs.getDouble("C2");
            double c3 = rs.getDouble("C3");
            double c4 = rs.getDouble("C4");
            double c5 = rs.getDouble("C5");

            // Membuat array objek untuk setiap baris
            Object[] data = {id, namaAlternatif, c1, c2, c3, c4, c5};

            // Tambahkan baris ke model tabel
            model.addRow(data);
        }

        // Tutup koneksi dan statement
        rs.close();
        stmt.close();
        conn.close();

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
private double pembagi(String kolom) {
        double pembagi = 0;
        try {
            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            var q = "SELECT " + kolom + " AS kolom FROM alt_nilai";
            ResultSet r = s.executeQuery(q);

            while (r.next()) {
                double nilai = r.getDouble("kolom");
                double pangkat = Math.pow(nilai, 2);
                pembagi += pangkat;
            }
        } catch (SQLException e) {

        }
        return Math.sqrt(pembagi);
    }

    private int bobot(String kolom) {
        int bobot = 0;
        try {
            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            var q = "SELECT bobot FROM kriteria WHERE flag='" + kolom + "'";
            ResultSet r = s.executeQuery(q);

            while (r.next()) {
                bobot = r.getInt("bobot");
            }
        } catch (SQLException e) {

        }
        return bobot;
    }

    private void truncate(String tableName) {
        try {
            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            var q = "TRUNCATE TABLE `" + tableName + "`";
            s.executeUpdate(q);
        } catch (SQLException e) {

        }
    }

    private String label(String kolom) {
        String data = "";

        try {
            Connection k = koneksi.Go();
            Statement s = k.createStatement();

            var q = "SELECT label FROM kriteria WHERE flag='" + kolom + "'";

            ResultSet r = s.executeQuery(q);
            while (r.next()) {
                data = r.getString("label");
            }

        } catch (SQLException e) {
        }

        return data;
    }
private double min_max(String kolom, int opsi) {
        double data = 0;

        try {
            Connection k = koneksi.Go();
            Statement s = k.createStatement();

            var q = "";
            if (opsi == 1) {
                q = "SELECT MIN(" + kolom + ") AS val FROM norm_terbobot";
            } else {
                q = "SELECT MAX(" + kolom + ") AS val FROM norm_terbobot";
            }

            ResultSet r = s.executeQuery(q);
            while (r.next()) {
                data = r.getDouble("val");
            }

        } catch (SQLException e) {
        }

        return data;
    }

    private double getIdeal(String flag, String kriteria) {
        double idealvalue = 0;
        try {
            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            var q = "SELECT " + kriteria + " FROM ideal WHERE flag='" + flag + "'";
            ResultSet r = s.executeQuery(q);
            while (r.next()) {
                idealvalue = r.getDouble(kriteria);
            }
        } catch (SQLException e) {
        }
        return idealvalue;
    }

    private void calculateDistanceValue() { //mencari d+ d- (jarak)
        try {
            truncate("hasil");
            //A+
            double ideal_dp_C1 = getIdeal("A+", "C1");
            double ideal_dp_C2 = getIdeal("A+", "C2");
            double ideal_dp_C3 = getIdeal("A+", "C3");
            double ideal_dp_C4 = getIdeal("A+", "C4");
            double ideal_dp_C5 = getIdeal("A+", "C5");


            //A-
            double ideal_dm_C1 = getIdeal("A-", "C1");
            double ideal_dm_C2 = getIdeal("A-", "C2");
            double ideal_dm_C3 = getIdeal("A-", "C3");
            double ideal_dm_C4 = getIdeal("A-", "C4");
            double ideal_dm_C5 = getIdeal("A-", "C5");


            //D+ and D-
            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            var q = "SELECT * FROM norm_terbobot";
            ResultSet r = s.executeQuery(q);
            while (r.next()) {
                int id = r.getInt("id");
                int alt_id = r.getInt("alt_id");
                double C1 = r.getDouble("C1");
                double C2 = r.getDouble("C2");
                double C3 = r.getDouble("C3");
                double C4 = r.getDouble("C4");
                double C5 = r.getDouble("C5");
               

                //D+
                double dp = Math.sqrt(
                        Math.pow(ideal_dp_C1 - C1, 2)
                        + Math.pow(ideal_dp_C2 - C2, 2)
                        + Math.pow(ideal_dp_C3 - C3, 2)
                        + Math.pow(ideal_dp_C4 - C4, 2)
                        + Math.pow(ideal_dp_C5 - C5, 2));
                        
                //D-
                double dm = Math.sqrt(
                        Math.pow(C1 - ideal_dm_C1, 2)
                        + Math.pow(C2 - ideal_dm_C2, 2)
                        + Math.pow(C3 - ideal_dm_C3, 2)
                        + Math.pow(C4 - ideal_dm_C4, 2)
                        + Math.pow(C5 - ideal_dm_C5, 2));
                        

                //v
                double v = dm / (dm + dp);

                //insert into table hasil
                Connection k2 = koneksi.Go();
                Statement s2 = k2.createStatement();
                var q2 = "INSERT INTO hasil (alt_id,dplus,dmin,v) "
                        + "VALUE "
                        + "('"+alt_id+"','" + dp + "','" + dm + "','" + v + "')";
                s2.executeUpdate(q2);
            }
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

private void CalcIdealValue() { //menghitung a+ a- (ideal) 

        try {
            truncate("ideal");
            //A+
            double ap_C1 = label("C1").equals("cost") ? min_max("C1", 1) : min_max("C1", 2);
            double ap_C2 = label("C2").equals("cost") ? min_max("C2", 1) : min_max("C2", 2);
            double ap_C3 = label("C3").equals("cost") ? min_max("C3", 1) : min_max("C3", 2);
            double ap_C4 = label("C4").equals("cost") ? min_max("C4", 1) : min_max("C4", 2);
            double ap_C5 = label("C5").equals("cost") ? min_max("C5", 1) : min_max("C5", 2);
            

            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            var q = "INSERT INTO ideal (flag,C1,C2,C3,C4,C5) "
                    + "VALUE "
                    + "('A+','" + ap_C1 + "','" + ap_C2 + "','" + ap_C3 + "','" + ap_C4 + "','" + ap_C5 + "')";
            s.executeUpdate(q);

            //A-
            double am_C1 = label("C1").equals("cost") ? min_max("C1", 2) : min_max("C1", 1);
            double am_C2 = label("C2").equals("cost") ? min_max("C2", 2) : min_max("C2", 1);
            double am_C3 = label("C3").equals("cost") ? min_max("C3", 2) : min_max("C3", 1);
            double am_C4 = label("C4").equals("cost") ? min_max("C4", 2) : min_max("C4", 1);
            double am_C5 = label("C5").equals("cost") ? min_max("C5", 2) : min_max("C5", 1);
            

            Connection k2 = koneksi.Go();
            Statement s2 = k2.createStatement();
            var q2 = "INSERT INTO ideal (flag,C1,C2,C3,C4,C5) "
                    + "VALUE "
                    + "('A-','" + am_C1 + "','" + am_C2 + "','" + am_C3 + "','" + am_C4 + "','" + am_C5 + "')";
            s2.executeUpdate(q2);

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

  private void topsis() {
        truncate("hasil_normalisasi");
        truncate("norm_terbobot");
        try {
            Connection k = koneksi.Go();
            Statement s = k.createStatement();
            var q = "SELECT * FROM alt_nilai";

            ResultSet r = s.executeQuery(q);
            while (r.next()) {
                int id = r.getInt("id");
                int alt_id = r.getInt("alt_id");
                double C1 = r.getDouble("C1");
                double C2 = r.getDouble("C2");
                double C3 = r.getDouble("C3");
                double C4 = r.getDouble("C4");
                double C5 = r.getDouble("C5");
                

                double pembagiC1 = pembagi("C1");
                double pembagiC2 = pembagi("C2");
                double pembagiC3 = pembagi("C3");
                double pembagiC4 = pembagi("C4");
                double pembagiC5 = pembagi("C5");
               

//              //norm
                double n_C1 = C1 / pembagiC1;
                double n_C2 = C2 / pembagiC2;
                double n_C3 = C3 / pembagiC3;
                double n_C4 = C4 / pembagiC4;
                double n_C5 = C5 / pembagiC5;
                

                Connection k2 = koneksi.Go();
                Statement s2 = k2.createStatement();
                var q2 = "INSERT INTO hasil_normalisasi "
                        + "(alt_id,C1,C2,C3,C4,C5) "
                        + "VALUES "
                        + "('" + alt_id + "','" + n_C1 + "','" + n_C2 + "','" + n_C3 + "','" + n_C4 + "','" + n_C5 + "');";
                s2.executeUpdate(q2);

                //norm terbobot
                double nt_C1 = bobot("C1") * n_C1;
                double nt_C2 = bobot("C2") * n_C2;
                double nt_C3 = bobot("C3") * n_C3;
                double nt_C4 = bobot("C4") * n_C4;
                double nt_C5 = bobot("C5") * n_C5;
                

                Connection k3 = koneksi.Go();
                Statement s3 = k3.createStatement();
                var q3 = "INSERT INTO norm_terbobot "
                        + "(alt_id,C1,C2,C3,C4,C5) "
                        + "VALUES "
                        + "('" + alt_id + "','" + nt_C1 + "','" + nt_C2 + "','" + nt_C3 + "','" + nt_C4 + "','" + nt_C5 + "');";
                s3.executeUpdate(q3);
            }

            CalcIdealValue();
            calculateDistanceValue();
        } catch (SQLException e) {
        }
    }
   // Update tblNormalisasi
    private void updateTblNormalisasi() {
    try {
        DefaultTableModel model = (DefaultTableModel) tblNormalisasi.getModel();
        model.setRowCount(0); // Clear existing rows

        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        // Query dengan JOIN untuk mendapatkan nama alternatif
        String query = "SELECT hasil_normalisasi.id, alternatif.nama, hasil_normalisasi.C1, hasil_normalisasi.C2, hasil_normalisasi.C3, hasil_normalisasi.C4, hasil_normalisasi.C5 " +
                       "FROM hasil_normalisasi " +
                       "JOIN alternatif ON hasil_normalisasi.alt_id = alternatif.id";
        ResultSet r = s.executeQuery(query);

        while (r.next()) {
            Object[] row = {
                r.getInt("id"),
                r.getString("nama"), 
                r.getString("C1"),
                r.getString("C2"),
                r.getString("C3"),
                r.getString("C4"),
                r.getString("C5")
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}


// Update tblnormtbb
private void updateTblNormalisasiTbb() {
    try {
        DefaultTableModel model = (DefaultTableModel) tblnormtbb.getModel();
        model.setRowCount(0); // Clear existing rows

        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        
        String query = "SELECT norm_terbobot.id, alternatif.nama, norm_terbobot.C1, norm_terbobot.C2, norm_terbobot.C3, norm_terbobot.C4, norm_terbobot.C5 " +
                       "FROM norm_terbobot " +
                       "JOIN alternatif ON norm_terbobot.alt_id = alternatif.id";
        ResultSet r = s.executeQuery(query);

        while (r.next()) {
            Object[] row = {
                r.getInt("id"),
                r.getString("nama"), 
                r.getString("C1"),
                r.getString("C2"),
                r.getString("C3"),
                r.getString("C4"),
                r.getString("C5")
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
// Update tblideal
private void updateTblIdeal() {
    try {
        DefaultTableModel model = (DefaultTableModel) tblideal.getModel();
        model.setRowCount(0); // Clear existing rows

        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        ResultSet r = s.executeQuery("SELECT * FROM ideal");

        while (r.next()) {
            Object[] row = {
                r.getInt("id"),
                r.getString("flag"),
                r.getString("C1"),
                r.getString("C2"),
                r.getString("C3"),
                r.getString("C4"),
                r.getString("C5")
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

// Update tbljarak
private void updateTblJarak() {
    try {
        DefaultTableModel model = (DefaultTableModel) tbljarak.getModel();
        model.setRowCount(0); // Clear existing rows

        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        // Query dengan JOIN untuk mendapatkan nama alternatif
        String query = "SELECT hasil.id, alternatif.nama, hasil.dplus, hasil.dmin " +
                       "FROM hasil " +
                       "JOIN alternatif ON hasil.alt_id = alternatif.id";
        ResultSet r = s.executeQuery(query);

        while (r.next()) {
            Object[] row = {
                r.getInt("id"),
                r.getString("nama"), // Mendapatkan nama dari tabel alternatif
                r.getString("dplus"),
                r.getString("dmin")
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}


// Update tblhasil
private void updateTblHasil() {
    try {
        DefaultTableModel model = (DefaultTableModel) tblhasil.getModel();
        model.setRowCount(0); // Clear existing rows

        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        // Query dengan JOIN untuk mendapatkan nama alternatif
        String query = "SELECT hasil.id, alternatif.nama, hasil.v " +
                       "FROM hasil " +
                       "JOIN alternatif ON hasil.alt_id = alternatif.id";
        ResultSet r = s.executeQuery(query);

        while (r.next()) {
            Object[] row = {
                r.getInt("id"),
                r.getString("nama"), // Mendapatkan nama dari tabel alternatif
                r.getString("v")
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private void updateTblRanking() {
    try {
        // Dapatkan model dari JTable ranking
        DefaultTableModel model = (DefaultTableModel) tblranking.getModel();
        model.setRowCount(0); // Hapus baris yang ada

        // Koneksi ke database
        Connection k = koneksi.Go();
        Statement s = k.createStatement();
        
        // Query untuk mengambil dan mengurutkan data dari tabel hasil
        String query = "SELECT hasil.alt_id, alternatif.nama, hasil.v " +
                       "FROM hasil " +
                       "JOIN alternatif ON hasil.alt_id = alternatif.id " +
                       "ORDER BY hasil.v DESC";

        ResultSet r = s.executeQuery(query);

        int rank = 1; // Inisialisasi nomor urut
        while (r.next()) {
            Object[] row = {
                rank, // Nomor urut
                r.getString("nama"), // Mendapatkan nama dari tabel alternatif
                r.getDouble("v") // Nilai V dari hasil
            };
            model.addRow(row);
            rank++; // Increment nomor urut untuk baris berikutnya
        }
        
        // Tutup resource yang digunakan
        r.close();
        s.close();
        k.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
// Method to update all tables
private void updateAllTables() {
    updateTblNormalisasi();
    updateTblNormalisasiTbb();
    updateTblIdeal();
    updateTblJarak();
    updateTblHasil();
    updateTblRanking();
}
}